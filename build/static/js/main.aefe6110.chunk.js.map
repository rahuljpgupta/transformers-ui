{"version":3,"sources":["../node_modules/react-semantic-ui-datepickers/dist/locales sync /^/.//.*/.json$","components/ChartDropdown.jsx","components/NavigationBar.jsx","components/ChartHeader.jsx","charts/ComposedChartView.jsx","charts/AreaChartView.jsx","charts/BarChartView.jsx","charts/LineChartView.jsx","components/ChartContainer.jsx","components/ClassCreationModal.jsx","components/ClassSlotsMenu.jsx","App.js","reportWebVitals.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","ChartDropdown","handleChartSelection","selectedChart","handleSelection","Dropdown","drop","Toggle","variant","Menu","eventKey","Name","item","Item","onSelect","LineChartView","Navbar","bg","Brand","href","Nav","className","Link","end","ChartHeader","ComposedChartView","handleChartItemClick","data","parsedData","date","Date","classDate","dd","String","getDate","padStart","name","getMonth","getFullYear","width","height","dataKey","stroke","type","fill","onClick","barSize","AreaChartView","handleClick","f","g","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","strokeDasharray","fillOpacity","BarChartView","bsPrefix","ChartContainer","chartData","selectedChartComponent","ClassCreationModal","isModalOpen","toggleModalState","handleCreateClassClick","onModalInputChange","selectedClassType","instructorOptions","range","Modal","show","onHide","Header","closeButton","Title","Body","Form","Row","Group","as","Col","controlId","Label","Control","placeholder","value","disabled","onChange","fluid","selection","options","custom","Footer","Button","ClassSlotsMenu","props","handleMenuClick","selectedClass","handleClassTimeSelection","handleCreateClass","state","formData","s","setState","target","handleClassTypeClick","textContent","popover","selectedClassTime","Popover","classSuggestions","classType","Content","selectedChartItem","mm","Intl","DateTimeFormat","month","format","substr","getParsedDate","startDate","endDate","dateObjStart","dateObjEnd","localStartTime","toLocaleTimeString","hour","minute","localEndTime","getAvailableInstructorsPerClass","availableInstructors","forEach","classSuggestion","parsedAvailableInstructors","instructor","push","key","toLowerCase","text","this","suggestedClassesPerDate","vertical","active","length","suggestedClassPerDate","OverlayTrigger","trigger","placement","overlay","rootClose","classSuggestedDate","classSuggestedEndDate","Spinner","animation","Component","App","handleDatesChange","event","dd1","mm1","yyyy1","dd2","mm2","yyyy2","fetchTrafficPrediction","selectedDates","yyyy","fetchAvailableInstructors","fetchClassSuggestion","undefined","today","startTime","endTime","Number","split","toString","payload","scheduledDate","instructorId","capacity","classId","postCreateClass","alert","fetchForecast","axios","get","then","res","console","log","EndDate","start","dd7","trafficPredictionData","post","catch","err","NavigationBar","Container","style","marginLeft","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aefe6110.chunk.js","sourcesContent":["var map = {\n\t\"./bg-BG.json\": 403,\n\t\"./ca-ES.json\": 404,\n\t\"./cs-CZ.json\": 405,\n\t\"./de-DE.json\": 406,\n\t\"./en-US.json\": 272,\n\t\"./es-ES.json\": 407,\n\t\"./et-EE.json\": 408,\n\t\"./fi-FI.json\": 409,\n\t\"./fr-FR.json\": 410,\n\t\"./he-IL.json\": 411,\n\t\"./it-IT.json\": 412,\n\t\"./ja-JP.json\": 413,\n\t\"./ko-KR.json\": 414,\n\t\"./nb-NO.json\": 415,\n\t\"./nn-NO.json\": 416,\n\t\"./pl-PL.json\": 417,\n\t\"./pt-BR.json\": 418,\n\t\"./ru-RU.json\": 419,\n\t\"./sv-SE.json\": 420,\n\t\"./tr-TR.json\": 421,\n\t\"./zh-CN.json\": 422\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 402;","import {\n    Dropdown,\n} from 'react-bootstrap';\n  \n  function ChartDropdown({ handleChartSelection, selectedChart }) {\n    const dropdownOptions = [\n        {eventKey:\"Area\", Name:\"Area\"},\n        {eventKey:\"Bar\", Name:\"Bar\"},\n        {eventKey:\"Line\", Name:\"Line\"},\n        {eventKey:\"Composed\", Name:\"Composed\"},\n    ];\n    const handleSelection = e => {\n        handleChartSelection(e);\n    }\n    return (\n        <Dropdown drop=\"right\">\n        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n            {`Chart Type - ${selectedChart}`}\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n            {\n                dropdownOptions.map(item => (\n                    <Dropdown.Item eventKey={item.eventKey} key={item.eventKey} onSelect={handleSelection}>{item.Name}</Dropdown.Item>\n                ))\n            }\n        </Dropdown.Menu>\n        </Dropdown>\n    );\n  }\n  \n  export default ChartDropdown;\n  ","import {\n    Navbar,\n    Nav,\n} from 'react-bootstrap';\n  \n  function LineChartView() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">Traffic Predictor</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#home\">About</Nav.Link>\n            <Nav.Link id=\"branding\" end>Studio - Abc Wellness</Nav.Link>\n            </Nav>\n        </Navbar>\n    );\n  }\n  \n  export default LineChartView;\n  ","\n   function ChartHeader() {\n    return (\n        <div className=\"chart-header\">\n            Traffic prediction\n        </div>\n    );\n  }\n  \n  export default ChartHeader;\n  ","import {\n  ComposedChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  CartesianGrid,\n  Area,\n  Bar,\n  Line,\n} from 'recharts';\n\nfunction ComposedChartView({handleChartItemClick, data}) {\n  const handleClick = e => {\n    handleChartItemClick(e);\n  }\n  \n  const parsedData = data && data.map(item => {\n  let date = new Date(item.classDate);\n  const dd = String(date.getDate()).padStart(2, '0');\n  const mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0!\n  const yyyy = date.getFullYear();\n  const name = mm + '/' + dd + '/' + yyyy;\n\n    return {\n      ...item,\n      name,\n    }\n  })\n\n  return (\n      <ComposedChart width={730} height={250} data={parsedData}>\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <CartesianGrid stroke=\"#f5f5f5\" />\n        <Area type=\"monotone\" dataKey=\"upperEstimate\" fill=\"#cfeb34\" stroke=\"#b4eb34\" />\n        <Bar onClick={handleClick} dataKey=\"actual\" barSize={20} fill=\"#413ea0\" />\n        <Line type=\"monotone\" dataKey=\"forecast\" stroke=\"#ff7300\" />\n      </ComposedChart>\n  );\n}\n\nexport default ComposedChartView;\n","import {\n    AreaChart,\n    XAxis,\n    YAxis,\n    Tooltip,\n    CartesianGrid,\n    Area,\n  } from 'recharts';\n  \n  function AreaChartView({handleChartItemClick, data}) {\n    const handleClick = (e,f,g) => {\n      handleChartItemClick(e);\n    }\n    const parsedData = data && data.map(item => {\n      let date = new Date(item.classDate);\n      const dd = String(date.getDate()).padStart(2, '0');\n      const mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0!\n      const yyyy = date.getFullYear();\n      const name = mm + '/' + dd + '/' + yyyy;\n  \n        return {\n          ...item,\n          name,\n        }\n      })\n    return (\n        <AreaChart width={730} height={250} data={parsedData}\n        margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n        <defs>\n          <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0}/>\n          </linearGradient>\n          <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0}/>\n          </linearGradient>\n        </defs>\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip />\n        <Area onClick={handleClick} type=\"monotone\" dataKey=\"forecast\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorUv)\" />\n        <Area onClick={handleClick} type=\"monotone\" dataKey=\"actual\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorPv)\" />\n      </AreaChart>\n    );\n  }\n  \n  export default AreaChartView;\n  ","import {\n    BarChart,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Legend,\n    CartesianGrid,\n    Bar,\n  } from 'recharts';\n  \n  function BarChartView({handleChartItemClick, data}) {\n    const handleClick = e => {\n      handleChartItemClick(e);\n    }\n    const parsedData = data && data.map(item => {\n    let date = new Date(item.classDate);\n    const dd = String(date.getDate()).padStart(2, '0');\n    const mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0!\n    const yyyy = date.getFullYear();\n    const name = mm + '/' + dd + '/' + yyyy;\n\n      return {\n        ...item,\n        name,\n      }\n    })\n    return (\n        <BarChart width={730} height={250} data={parsedData}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar bsPrefix=\"bsPrefix-bar\" onClick={handleClick} dataKey=\"actual\" fill=\"#8884d8\" />\n            <Bar bsPrefix=\"bsPrefix-bar\" onClick={handleClick} dataKey=\"forecast\" fill=\"#82ca9d\" />\n        </BarChart>\n    );\n  }\n  \n  export default BarChartView;\n  ","import {\n    LineChart,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Legend,\n    CartesianGrid,\n    Line,\n  } from 'recharts';\n  \n  function LineChartView({handleChartItemClick, data}) {\n    const handleClick = e => {\n      handleChartItemClick(e);\n    }\n    \n    const parsedData = data && data.map(item => {\n    let date = new Date(item.classDate);\n    const dd = String(date.getDate()).padStart(2, '0');\n    const mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0!\n    const yyyy = date.getFullYear();\n    const name = mm + '/' + dd + '/' + yyyy;\n  \n      return {\n        ...item,\n        name,\n      }\n    })\n    return (\n        <LineChart width={730} height={250} data={parsedData}\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" onClick={handleClick}/>\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line onClick={handleClick} type=\"monotone\" dataKey=\"upperEstimate\" stroke=\"#b4eb34\" />\n            <Line onClick={handleClick} type=\"monotone\" dataKey=\"actual\" stroke=\"#8884d8\" />\n            <Line onClick={handleClick} type=\"monotone\" dataKey=\"forecast\" stroke=\"#82ca9d\" />\n        </LineChart>\n    );\n  }\n  \n  export default LineChartView;\n  ","import ComposedChartView from '../charts/ComposedChartView';\nimport AreaChartView from '../charts/AreaChartView';\nimport BarChartView from '../charts/BarChartView';\nimport LineChartView from '../charts/LineChartView';\n  \n  function ChartContainer({ selectedChart, handleChartItemClick, chartData }) {\n    let selectedChartComponent = <AreaChartView data={chartData} handleChartItemClick={handleChartItemClick} />;\n    switch(selectedChart) {\n        case 'Line':\n            selectedChartComponent = <LineChartView data={chartData} handleChartItemClick={handleChartItemClick} />\n            break;\n        case 'Bar':\n            selectedChartComponent = <BarChartView data={chartData} handleChartItemClick={handleChartItemClick} />\n            break;\n        case 'Composed':\n            selectedChartComponent = <ComposedChartView data={chartData} handleChartItemClick={handleChartItemClick} />\n            break;\n    }\n    return (\n        <div>\n            {selectedChartComponent}\n        </div>\n    );\n  }\n  \n  export default ChartContainer;\n  ","import {\n    Modal,\n    Button,\n    Form,\n    Col\n} from 'react-bootstrap';\nimport { Dropdown } from 'semantic-ui-react';\n\nconst ClassCreationModal = ({isModalOpen, toggleModalState, handleCreateClassClick, onModalInputChange, selectedClassType, instructorOptions, range}) => (\n    <Modal show={isModalOpen} onHide={toggleModalState}>\n        <Modal.Header closeButton>\n          <Modal.Title>Create a class</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        <Form>\n            <Form.Row>\n                <Form.Group as={Col} controlId=\"formGridClassType\">\n                <Form.Label>Class Type</Form.Label>\n                <Form.Control type=\"classType\" placeholder=\"Class Type\" value={selectedClassType} disabled onChange={onModalInputChange} />\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"exampleForm.SelectCustom\">\n                    <Form.Label>Instructor</Form.Label>\n                    <Dropdown placeholder='Select Instructor' name=\"instructor\" fluid selection options={instructorOptions} onChange={onModalInputChange} />\n                </Form.Group>\n            </Form.Row>\n            <Form.Group controlId=\"formBasicRangeCustom\">\n                <Form.Label>{\"Capacity: \"}</Form.Label>\n                <Form.Label> {range ? range : 50} </Form.Label>\n                <Form.Control type=\"range\" value={range} custom onChange={onModalInputChange} />\n            </Form.Group>\n            </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={toggleModalState}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleCreateClassClick}>\n            Create\n          </Button>\n        </Modal.Footer>\n      </Modal>\n  );\n\nexport default ClassCreationModal;","import React, { Component } from 'react';\nimport { Label, Menu } from 'semantic-ui-react';\nimport {\n  Popover,\n  OverlayTrigger,\n  Spinner\n} from 'react-bootstrap';\nimport ClassCreationModal from './ClassCreationModal';\nclass ClassSlotsMenu extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      formData: {\n        range: 50\n      },\n      availableInstructors: 0\n    };\n  }\n  \n  handleMenuClick = (e, selectedClass) => {\n    this.props.handleClassTimeSelection(selectedClass);\n  }\n\n  handleCreateClassClick = () => {\n    this.props.handleCreateClass(this.state.formData);\n  }\n\n  onModalInputChange = (e, s) => {\n    if(s && s.name) {\n      this.setState({\n        formData: {\n          ...this.state.formData,\n          [s.name]: s.value\n        }\n      });\n    } else {\n      this.setState({\n        formData: {\n          ...this.state.formData,\n          [e.target.type]: e.target.value\n        }\n      });\n    } \n  }\n\n  handleClassTypeClick = e => {\n    this.props.handleClassTypeClick(e.target.textContent);\n  }\n\n  popover = () => {\n    const { selectedClassTime} = this.props;\n\n    return (\n      <Popover id=\"popover-basic\">\n        <Popover.Title as=\"h3\">Choose class you want to create</Popover.Title>\n        {selectedClassTime && selectedClassTime.value && selectedClassTime.value.classSuggestions\n        && selectedClassTime.value.classSuggestions.map(classType => (\n          <Popover.Content onClick={this.handleClassTypeClick}>{classType.className}</Popover.Content>\n        ))}\n        \n      </Popover>\n    )\n    }\n\n  getDate = () => {\n    const { selectedChartItem} = this.props;\n    const date = new Date(selectedChartItem.classDate);\n    const  options = { month: 'long'};\n    const mm = new Intl.DateTimeFormat('en-US', options).format(date);\n    const dd = String(date.getDate()).padStart(2, '0');\n    \n    return mm.substr(0, 3) + ' ' + dd;\n  }\n\n  getParsedDate = (startDate, endDate) => {\n    const dateObjStart = new Date(startDate);\n    const dateObjEnd = new Date(endDate);\n\n    const localStartTime = dateObjStart.toLocaleTimeString('en-US', { hour: '2-digit' ,minute: '2-digit' });\n    const localEndTime = dateObjEnd.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n    // const startTime = `${localTime.split(':')[0]} : ${localTime.split(':')[1]}`;\n    // const endTime = `${Number(localTime.split(':')[0]) + 1} : ${localTime.split(':')[1]}`;\n    // return `${startTime} ${localTime.slice(-2)} - ${endTime} ${localTime.slice(-2)}`;\n    \n    return `${localStartTime} - ${localEndTime}`;\n  }\n\n  getAvailableInstructorsPerClass = () => {\n    const { selectedClassTime, selectedClassType } = this.props;\n    let availableInstructors = [];\n\n    selectedClassTime && selectedClassTime.value \n    && selectedClassTime.value.classSuggestions \n      && selectedClassTime.value.classSuggestions.forEach(classSuggestion => {\n      if(classSuggestion.className === selectedClassType) {\n        availableInstructors = classSuggestion.availableInstructors;\n      }\n    });\n    const parsedAvailableInstructors = [];\n  \n    availableInstructors.forEach(instructor => {\n      parsedAvailableInstructors.push({\n        key: instructor.name.toLowerCase(),\n        value: instructor.id,\n        text: instructor.name,\n      })\n    })\n    \n    return parsedAvailableInstructors;\n  }\n\n    render() {\n      const {isModalOpen, toggleModalState, availableInstructors, suggestedClassesPerDate, selectedClassTime} = this.props;\n\n      return (\n        <div>\n          <Menu vertical>\n            <Menu.Item\n              key='menu-header'\n              active={true}\n              >\n                <h5>\n                {`Required Classes for ${this.getDate()}\n                  (Available instructors - ${availableInstructors ? availableInstructors.length : 0 })`}\n                </h5>\n            </Menu.Item>\n              {suggestedClassesPerDate ? (suggestedClassesPerDate.length > 0 ? suggestedClassesPerDate.map(suggestedClassPerDate => (\n                <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={this.popover()} rootClose={true}>\n                  <Menu.Item\n                    key={this.getParsedDate(suggestedClassPerDate.classSuggestedDate)}\n                    name={this.getParsedDate(suggestedClassPerDate.classSuggestedDate)}\n                    value={suggestedClassPerDate}\n                    active={selectedClassTime.name === this.getParsedDate(suggestedClassPerDate.classSuggestedDate)} //TODO: fix\n                    onClick={this.handleMenuClick}\n                  >\n                    <Label>{suggestedClassPerDate.classSuggestions.length}</Label>\n                    {this.getParsedDate(suggestedClassPerDate.classSuggestedDate, suggestedClassPerDate.classSuggestedEndDate)}\n                  </Menu.Item>\n                  </OverlayTrigger>\n                )) : (<Menu.Item\n                  key='no-item'\n                  active={true}\n                  >\n                    <h5>\n                      No Suggestion for this date.\n                    </h5>\n                </Menu.Item>)) : (\n                  <Spinner animation=\"grow\" />\n              )}\n          </Menu>\n          <ClassCreationModal\n            isModalOpen={isModalOpen}\n            toggleModalState={toggleModalState}\n            handleCreateClassClick={this.handleCreateClassClick}\n            onModalInputChange={this.onModalInputChange}\n            selectedClassType={this.props.selectedClassType}\n            instructorOptions={this.getAvailableInstructorsPerClass()}\n            range={this.state.formData.range}\n          />\n        </div>\n      );\n    }\n  }\n  \n  export default ClassSlotsMenu;\n  ","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  Container,\n  Row,\n  Col,\n} from 'react-bootstrap';\nimport axios from 'axios';\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\nimport ChartDropdown from './components/ChartDropdown';\nimport NavigationBar from './components/NavigationBar';\nimport ChartHeader from './components/ChartHeader';\nimport ChartContainer from './components/ChartContainer';\nimport ClassSlotsMenu from './components/ClassSlotsMenu';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      selectedChart: 'Bar',\n      selectedClassTime: '',\n      selectedChartItem: null,\n      isModalOpen: false,\n      selectedDates: null,\n    };\n  }\n\n  handleDatesChange = (event, data) => {\n    if(data.value && data.value.length === 2 ) {\n      let startDate = new Date(data.value[0]);\n      let endDate = new Date(data.value[1]);\n      const dd1 = String(startDate.getDate()).padStart(2, '0');\n      const mm1 = String(startDate.getMonth() + 1).padStart(2, '0');\n      const yyyy1 = startDate.getFullYear();\n      const dd2 = String(endDate.getDate()).padStart(2, '0');\n      const mm2 = String(endDate.getMonth() + 1).padStart(2, '0');\n      const yyyy2 = endDate.getFullYear();\n\n      startDate = mm1 + '/' + dd1 + '/' + yyyy1;\n      endDate = mm2 + '/' + dd2 + '/' + yyyy2;\n\n      this.fetchTrafficPrediction(startDate, endDate);\n    } else if (data.value === null) {\n      this.fetchTrafficPrediction();\n    }\n    \n    this.setState({\n      selectedDates: data.value\n    })\n  };\n\n  handleChartSelection = e => {\n    this.setState({\n      selectedChart: e,\n    })\n  }\n\n  handleClassTimeSelection = (name) => {\n    this.setState({\n      selectedClassTime: name,\n    })\n  }\n\n  handleChartItemClick = e => {\n    let date = new Date(e.classDate);\n    const  options = { month: 'long'};\n    const mm = new Intl.DateTimeFormat('en-US', options).format(date);\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n    date = mm + '/' + dd + '/' + yyyy;\n   \n    this.fetchAvailableInstructors(date);\n    this.fetchClassSuggestion(date);\n\n    this.setState({\n      selectedChartItem: e,\n    })\n  }\n\n  toggleModalState = () => {\n    this.setState({\n      isModalOpen: !this.state.isModalOpen\n    })\n  }\n\n  handleCreateClass = (formData) => {\n    if(formData.instructor === undefined || formData.instructor === null ) {\n      alert('Please select the instructor for the class');\n      return;\n    }\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = today.getFullYear();\n    today = yyyy + '-' + mm + '-' + dd;\n    \n    const startTime = this.state.selectedClassTime && this.state.selectedClassTime.name;\n    const endTime = (Number(startTime.split(':')[0]) + 1).toString() + ':00';\n\n    const payload = {\n      scheduledDate: today,\n      startTime,\n      endTime,\n      className: this.state.selectedClassType,\n      instructorId: formData.instructor,\n      capacity: Number(formData.range ? formData.range : 50) ,\n      classId: 0\n    }\n    this.postCreateClass(payload);\n    this.setState({\n      selectedChartItem: null,\n      isModalOpen: !this.state.isModalOpen\n    })\n  }\n\n  handleClassTypeClick = className => {\n    this.setState({\n      selectedClassType: className,\n      isModalOpen: true\n    })\n  }\n\n  fetchForecast = () => {\n    axios.get('https://transformer-businessengine.azurewebsites.net/api/Forecast')\n    .then(res=> {\n      console.log('fetchForecast', res);\n    });\n  }\n\n  fetchTrafficPrediction = (startDate, EndDate) => {\n    let start, end;\n    if(!startDate) {\n      let today = new Date();\n      const dd = String(today.getDate()).padStart(2, '0');\n      const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n      const yyyy = today.getFullYear();\n      start = mm + '/' + dd + '/' + yyyy;\n    } else {\n      start = startDate;\n    }\n    if(!EndDate) {\n      let today = new Date();\n      const dd7 = String(today.getDate() + 7).padStart(2, '0');\n      const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n      const yyyy = today.getFullYear();\n      end = mm + '/' + dd7 + '/' + yyyy;\n    } else {\n      end = EndDate;\n    }\n\n    axios.get(`https://transformer-businessengine.azurewebsites.net/api/TrafficPredictor?StartDate=${start}&EndDate=${end}`)\n    .then(res=> {\n      this.setState({\n        trafficPredictionData: res.data.data\n      })\n    });\n  }\n\n  fetchAvailableInstructors = (date) => {\n    axios.get(`https://transformer-businessengine.azurewebsites.net/api/TrafficPredictor/AvailableInstructor/?AvailableDate=${date}`)\n    .then(res=> {\n      this.setState({\n        availableInstructors: res.data.data.availableInstructors\n      })\n    });\n  }\n\n  fetchClassSuggestion = (date) => {\n    // const date1 = '1/3/2020'; //TODO: remove after api working properly\n    this.setState({\n      suggestedClassesPerDate: null\n    })\n    axios.get(`https://transformer-businessengine.azurewebsites.net/api/TrafficPredictor/ClassSuggestion?ClassSuggestedDate=${date}`)\n    .then(res=> {\n      this.setState({\n        suggestedClassesPerDate: res.data.data ? res.data.data : []\n      })\n    });\n  }\n\n  postCreateClass = (payload) => {\n    axios.post('https://transformer-businessengine.azurewebsites.net/api/ScheduleClass', payload)\n    .then(res=> {\n      alert(\"Class created successfully\");\n    }).catch(err => {\n      alert(\"Class created successfully\");\n    });\n  }\n\n  componentDidMount() {\n    this.fetchTrafficPrediction();\n  }\n  \n  render() {\n    const { suggestedClassesPerDate } = this.state;\n    return (\n      <div className=\"App\">\n      <NavigationBar />\n      <Container>\n        <ChartHeader />\n        <Row>\n          <Col>\n            <ChartContainer\n              chartData={this.state.trafficPredictionData}\n              selectedChart={this.state.selectedChart}\n              handleChartItemClick={this.handleChartItemClick}\n            />\n          </Col>\n          <div>\n            <SemanticDatepicker onChange={this.handleDatesChange} type=\"range\" />\n          </div>\n          <Col>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n          {this.state.selectedChartItem && (\n          <ClassSlotsMenu\n            handleClassTimeSelection={this.handleClassTimeSelection}\n            selectedClassTime={this.state.selectedClassTime}\n            suggestedClassesPerDate={suggestedClassesPerDate}\n            isModalOpen={this.state.isModalOpen}\n            toggleModalState={this.toggleModalState}\n            handleCreateClass={this.handleCreateClass}\n            selectedChartItem={this.state.selectedChartItem}\n            availableInstructors={this.state.availableInstructors}\n            handleClassTypeClick={this.handleClassTypeClick}\n            selectedClassType={this.state.selectedClassType}\n          />\n          )}\n          </Col>\n          <div style={{marginLeft: '15rem'}}>\n            <ChartDropdown bsPrefix=\"chartdropdown-bsprefix\" handleChartSelection={this.handleChartSelection} selectedChart={this.state.selectedChart} />\n          </div>\n          <Col>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n    );\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}